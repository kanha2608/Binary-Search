Here, We will check whether the current mid is part of decreasing or increasing 
and then try to narrow down space.

1. If(A[mid] > A[mid-1] means mid is part of increasing sequence for sure A[l] to mid is sorted and if value lies in this range, do search in left part.
--> else in right part.
2. else means mid is part of decreasing sequence, and if A[h] is lesser than need and a[mid] is greater then right part 
--> left part.


int Solution::solve(vector<int> &A, int B) {
    int l = 0 , h = A.size() - 1;
    while(l <= h){
        int mid = l + (h-l)/2;
        if(A[mid] == B) return mid;
        if(mid > 0 && A[mid] > A[mid-1]){
            if(A[l] <= B &&  A[mid] > B){
                h = mid-1;
            }
            else{
                l = mid +1 ;
            }
        }
        else{
            if(A[h] <= B &&  A[mid] > B){
                l = mid+1;
            }
            else{
                h = mid -1 ;
            }
        }
    }
    return -1;
}



This solution won't work out for 
1 3 5 7 9 11 6 -> find '6'. This solution will break.


Instead first find the peak element and then do the BS on left and right part of it. 
